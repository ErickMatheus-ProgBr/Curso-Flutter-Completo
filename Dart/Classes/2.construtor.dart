
// üß© O que √© um construtor?
// Um construtor √© uma fun√ß√£o especial dentro de uma classe que serve para criar (instanciar) objetos e inicializar seus valores.


// Exemplo 1 (chat GPT): --------------------------------------------------------------------------


// class Pessoa{
//   String nome;
//   int idade;

//   // Construtor pad√£o
//   Pessoa(this.nome, this.idade);
// }

// void main(){
//   var p1 = Pessoa("Erick", 20);
//   print("Nome: ${p1.nome}, Idade: ${p1.idade}");
// }

// üß† Explica√ß√£o:
// O (this.nome, this.idade) j√° atribui automaticamente os valores aos atributos.
// Pessoa("Erick", 20) chama o construtor.


// Exemplo 2: ------------------------------------------------------------------------------

// üü¢ 2. Construtor nomeado (√∫til pra v√°rias formas de criar o objeto)
// Voc√™ pode ter v√°rios construtores diferentes com nomes distintos.

// class Pessoa {
//   String nome;
//   int idade;

//   Pessoa(this.nome, this.idade);

//   // Construtor nomeado
//   Pessoa.crianca(this.nome) : idade = 5;
// }

// void main() {
//   var adulto = Pessoa("Erick", 20);
//   var crianca = Pessoa.crianca("Maria");

//   print("Adulto: ${adulto.nome}, ${adulto.idade} anos");
//   print("Crian√ßa: ${crianca.nome}, ${crianca.idade} anos");
// }

// üß† Explica√ß√£o:
// Pessoa.crianca("Maria") chama o construtor nomeado.=
// O : permite inicializar atributos antes do corpo do construtor.

// Exemplo 3: -----------------------------------------------------------------------

// üü¢ 3. Construtor com par√¢metros nomeados (mais leg√≠vel)
// Voc√™ pode usar chaves {} pra facilitar a leitura dos par√¢metros.

// class Carro {
//   String marca;
//   String modelo;
//   int ano;

//   Carro({required this.marca, required this.modelo, required this.ano});
// }

// void main() {
//   var c1 = Carro(marca: "Toyota", modelo: "Corolla", ano: 2020);
//   print("${c1.marca} ${c1.modelo}, ano ${c1.ano}");
// }

/*
üß† Explica√ß√£o:

O required obriga que o par√¢metro seja passado.

A ordem n√£o importa quando os par√¢metros s√£o nomeados.

*/

// EXEMPLO 4 -------------------------------------------------------------------------

// Se o usu√°rio n√£o passar um valor, usa o padr√£o definido.

class Produto {
  String nome;
  double preco;

  Produto({required this.nome, this.preco = 10.0});
}

void main() {
  var p1 = Produto(nome: "Mouse");
  var p2 = Produto(nome: "Teclado", preco: 50.0);

  print("${p1.nome} custa R\$${p1.preco}");
  print("${p2.nome} custa R\$${p2.preco}");
}































// void main(){

//    final gol = Carro("Branco", 3.80);

//    print(gol.cor); 
//    gol.cor = "azul";
//    gol.ligar();  
//    print(gol.isAndando());
//    print(gol.cor);
  
// }

// class Carro{
  

//     String cor = "PRETO";
//     double tamanho = 4.15;

//     Carro(this.cor, this.tamanho){
//       print("Classe inicializando");
//     }

//     void ligar(){ 
//         print("liguei");
//     }

//     bool isAndando(){
//         return false;
//     }
// } 